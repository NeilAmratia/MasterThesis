[[deltas]]
type = "add"
id = 1
condition = { feature = "Heatable", state = "active" }
content = """
void processHeatable();
"""

[[deltas]]
type = "add"
id = 2
condition = { feature = "Heatable", state = "active" }
content = """
// Heatable mirror
rclcpp::Publisher<std_msgs::msg::Bool>::SharedPtr heating_off;
rclcpp::Publisher<std_msgs::msg::Bool>::SharedPtr heating_on;
rclcpp::Subscription<std_msgs::msg::Bool>::SharedPtr em_too_cold;
rclcpp::Subscription<std_msgs::msg::Bool>::SharedPtr time_heating_elapsed;

enum class ElectricMirrorHeatingState {
    HEATING_OFF,
    HEATING_ON
};
ElectricMirrorHeatingState current_em_heating_state = ElectricMirrorHeatingState::HEATING_OFF;

bool em_too_cold_value = false;
bool time_heating_elapsed_value = false;
"""
[[deltas]]
type = "add"
id = 3
condition = { feature = "Heatable", state = "active" }
content = """
// Heatable mirror
heating_off = node->create_publisher<std_msgs::msg::Bool>("heating_off", 10);
heating_on = node->create_publisher<std_msgs::msg::Bool>("heating_on", 10);
em_too_cold = node->create_subscription<std_msgs::msg::Bool>(
    "em_too_cold", 10,
    [this](const std_msgs::msg::Bool::SharedPtr msg) {
        em_too_cold_value = msg->data;
        processHeatable();
        em_too_cold_value = false;
    }
);
time_heating_elapsed = node->create_subscription<std_msgs::msg::Bool>(
    "time_heating_elapsed", 10,
    [this](const std_msgs::msg::Bool::SharedPtr msg) {
        time_heating_elapsed_value = msg->data;
        processHeatable();
        time_heating_elapsed_value = false;
    }
);
"""

[[deltas]]
type = "add"
id = 4
condition = { feature = "Heatable", state = "active" }
content = """
void DoorSystem::EM::processHeatable() {
    std_msgs::msg::Bool msg;
    msg.data = true;

    switch (current_em_heating_state) {
        case ElectricMirrorHeatingState::HEATING_OFF:
            if (em_too_cold_value) {
                std::cout << "ERROR 3" << std::endl;
                heating_on->publish(msg);
                current_em_heating_state = ElectricMirrorHeatingState::HEATING_ON;
            } 
            break;

        case ElectricMirrorHeatingState::HEATING_ON:
            if (time_heating_elapsed_value) {
                heating_off->publish(msg);
                current_em_heating_state = ElectricMirrorHeatingState::HEATING_OFF;
            } 
            break;
    }
}
"""

